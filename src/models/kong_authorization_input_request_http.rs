/*
 * Permit.io PDP
 *
 * The PDP (Policy decision point) container wraps Open Policy Agent (OPA) with a higher-level API intended for fine grained application-level authorization. The PDP automatically handles pulling policy updates in real-time from a centrally managed cloud-service (api.permit.io).
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KongAuthorizationInputRequestHttp {
    #[serde(rename = "host")]
    pub host: String,
    #[serde(rename = "port")]
    pub port: i32,
    #[serde(rename = "tls")]
    pub tls: serde_json::Value,
    #[serde(rename = "method")]
    pub method: String,
    #[serde(rename = "scheme")]
    pub scheme: String,
    #[serde(rename = "path")]
    pub path: String,
    #[serde(rename = "querystring")]
    pub querystring: std::collections::HashMap<String, String>,
    #[serde(rename = "headers")]
    pub headers: std::collections::HashMap<String, String>,
}

impl KongAuthorizationInputRequestHttp {
    pub fn new(host: String, port: i32, tls: serde_json::Value, method: String, scheme: String, path: String, querystring: std::collections::HashMap<String, String>, headers: std::collections::HashMap<String, String>) -> KongAuthorizationInputRequestHttp {
        KongAuthorizationInputRequestHttp {
            host,
            port,
            tls,
            method,
            scheme,
            path,
            querystring,
            headers,
        }
    }
}

