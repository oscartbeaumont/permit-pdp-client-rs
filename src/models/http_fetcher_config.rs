/*
 * Permit.io PDP
 *
 * The PDP (Policy decision point) container wraps Open Policy Agent (OPA) with a higher-level API intended for fine grained application-level authorization. The PDP automatically handles pulling policy updates in real-time from a centrally managed cloud-service (api.permit.io).
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// HttpFetcherConfig : Config for HttpFetchProvider's Adding HTTP headers.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HttpFetcherConfig {
    /// indicates to OPAL client that it should use a custom FetcherProvider to fetch the data
    #[serde(rename = "fetcher", skip_serializing_if = "Option::is_none")]
    pub fetcher: Option<String>,
    #[serde(rename = "headers", skip_serializing_if = "Option::is_none")]
    pub headers: Option<serde_json::Value>,
    #[serde(rename = "is_json", skip_serializing_if = "Option::is_none")]
    pub is_json: Option<bool>,
    #[serde(rename = "process_data", skip_serializing_if = "Option::is_none")]
    pub process_data: Option<bool>,
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<models::HttpMethods>,
    #[serde(rename = "data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub data: Option<Option<serde_json::Value>>,
}

impl HttpFetcherConfig {
    /// Config for HttpFetchProvider's Adding HTTP headers.
    pub fn new() -> HttpFetcherConfig {
        HttpFetcherConfig {
            fetcher: None,
            headers: None,
            is_json: None,
            process_data: None,
            method: None,
            data: None,
        }
    }
}

