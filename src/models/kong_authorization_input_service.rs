/*
 * Permit.io PDP
 *
 * The PDP (Policy decision point) container wraps Open Policy Agent (OPA) with a higher-level API intended for fine grained application-level authorization. The PDP automatically handles pulling policy updates in real-time from a centrally managed cloud-service (api.permit.io).
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct KongAuthorizationInputService {
    #[serde(rename = "host")]
    pub host: String,
    #[serde(rename = "created_at")]
    pub created_at: i32,
    #[serde(rename = "connect_timeout")]
    pub connect_timeout: i32,
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "procotol")]
    pub procotol: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "read_timeout")]
    pub read_timeout: i32,
    #[serde(rename = "port")]
    pub port: i32,
    #[serde(rename = "updated_at")]
    pub updated_at: i32,
    #[serde(rename = "ws_id")]
    pub ws_id: uuid::Uuid,
    #[serde(rename = "retries")]
    pub retries: i32,
    #[serde(rename = "write_timeout")]
    pub write_timeout: i32,
}

impl KongAuthorizationInputService {
    pub fn new(host: String, created_at: i32, connect_timeout: i32, id: uuid::Uuid, procotol: String, name: String, read_timeout: i32, port: i32, updated_at: i32, ws_id: uuid::Uuid, retries: i32, write_timeout: i32) -> KongAuthorizationInputService {
        KongAuthorizationInputService {
            host,
            created_at,
            connect_timeout,
            id,
            procotol,
            name,
            read_timeout,
            port,
            updated_at,
            ws_id,
            retries,
            write_timeout,
        }
    }
}

